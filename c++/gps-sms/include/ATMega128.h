#ifndef ATMega128_H
#define ATMega128_H

#include "AVR8.h"


class ATMega128 : public AVR8
{
public:
	static const unsigned short RAM_SIZE = 4096;

public:
	IOReg8 pinf;		// [0x20]
	IOReg8 pine;		// [0x21]
	IOReg8 ddre;		// [0x22]
	IOReg8 porte;		// [0x23]
	IOReg8 adcl;		// [0x24]
	IOReg8 adch;		// [0x25]
	IOReg8 adcsra;	 	// [0x26]
	IOReg8 admux;		// [0x27]
	IOReg8 acsr;		// [0x28]   
	IOReg8 ubrr0l;		// [0x29]
	IOReg8 ucsr0b;		// [0x2A]
	IOReg8 ucsr0a;		// [0x2B]
	IOReg8 udr0;		// [0x2C]
	IOReg8 spcr;		// [0x2D]
	IOReg8 spsr;		// [0x2E]
	IOReg8 spdr;		// [0x2F]
	IOReg8 pind;		// [0x30]
	IOReg8 ddrd;		// [0x31]
	IOReg8 portd;		// [0x32]
	IOReg8 pinc;		// [0x33]
	IOReg8 ddrc;		// [0x34]
	IOReg8 portc;		// [0x35]
	IOReg8 pinb;		// [0x36]
	IOReg8 ddrb;		// [0x37]
	IOReg8 portb;		// [0x38]
	IOReg8 pina;		// [0x39] 
	IOReg8 ddra;		// [0x3A]
	IOReg8 porta;		// [0x3B] 
	IOReg8 eecr;		// [0x3C] 
	IOReg8 eedr;		// [0x3D]
	IOReg8 eearl;		// [0x3E]
	IOReg8 eearh;		// [0x3F]
	IOReg8 sfior;		// [0x40]
	IOReg8 wdtcr;		// [0x41]
	IOReg8 ocdr;		// [0x42]
	IOReg8 ocr2;		// [0x43]
	IOReg8 tcnt2;		// [0x44]
	IOReg8 tccr2;		// [0x45]
	IOReg8 icr1l;		// [0x46]
	IOReg8 icr1h;		// [0x47]
	IOReg8 ocr1bl;	 	// [0x48]
	IOReg8 ocr1bh;	 	// [0x49]
	IOReg8 ocr1al;	 	// [0x4A]
	IOReg8 ocr1ah;	 	// [0x4B]
	IOReg8 tcnt1l;	 	// [0x4C]
	IOReg8 tcnt1h;	 	// [0x4D]
	IOReg8 tccr1b;	 	// [0x4E]
	IOReg8 tccr1a;	 	// [0x4F]
	IOReg8 assr;		// [0x50]
	IOReg8 ocr0;		// [0x51]
	IOReg8 tcnt0;		// [0x52]
	IOReg8 tccr0;		// [0x53]
	IOReg8 mcucsr;	 	// [0x54]
	IOReg8 mcucr;		// [0x55]
	IOReg8 tifr;		// [0x56]
	IOReg8 timsk;		// [0x57]
	IOReg8 eifr;		// [0x58]
	IOReg8 eimsk;		// [0x59]
	IOReg8 eicrb;		// [0x5A]
	IOReg8 rampz;	 	// [0x5B]
	IOReg8 xdiv;		// [0x5C] 
	IOReg8 spl;		// [0x5D]
	IOReg8 sph;		// [0x5E]
	IOReg8 sreg;		// [0x5F]
	IOReg8 reserved0;	// [0x60]
	IOReg8 ddrf;		// [0x61]
	IOReg8 portf;	       	// [0x62]
	IOReg8 ping;	    	// [0x63]
	IOReg8 ddrg;       	// [0x64]
	IOReg8 portg;      	// [0x65]
	IOReg8 reserved1;  	// [0x66]
	IOReg8 reserved2;  	// [0x67]
	IOReg8 spmcsr;     	// [0x68]
	IOReg8 reserved3;  	// [0x69]
	IOReg8 eicra;      	// [0x6A]
	IOReg8 reserved4;  	// [0x6B]
	IOReg8 xmcrb;      	// [0x6C]
	IOReg8 xmcra;      	// [0x6D]
	IOReg8 reserved5;  	// [0x6E]
	IOReg8 osccal;     	// [0x6F]
	IOReg8 twbr;       	// [0x70]
	IOReg8 twsr;       	// [0x71]
	IOReg8 twar;       	// [0x72]
	IOReg8 twdr;       	// [0x73]
	IOReg8 twcr;       	// [0x74]
	IOReg8 reserved6;  	// [0x75]
	IOReg8 reserved7;  	// [0x76]
	IOReg8 reserved8;  	// [0x77]
	IOReg8 ocr1cl;     	// [0x78]
	IOReg8 ocr1ch;     	// [0x79]
	IOReg8 tccr1c;     	// [0x7A]
	IOReg8 reserved9;  	// [0x7B]
	IOReg8 etifr;      	// [0x7C]
	IOReg8 etimsk;     	// [0x7D]
	IOReg8 reserved10; 	// [0x7E]
	IOReg8 reserved11; 	// [0x7F]
	IOReg8 icr3l;      	// [0x80]
	IOReg8 icr3h;      	// [0x81]
	IOReg8 ocr3cl;     	// [0x82]
	IOReg8 ocr3ch;     	// [0x83]
	IOReg8 ocr3bl;     	// [0x84]
	IOReg8 ocr3bh;     	// [0x85]
	IOReg8 ocr3al;     	// [0x86]
	IOReg8 ocr3ah;     	// [0x87]
	IOReg8 tcnt3l;     	// [0x88]
	IOReg8 tcnt3h;     	// [0x89]
	IOReg8 tccr3b;     	// [0x8A]
	IOReg8 tccr3a;     	// [0x8B]
	IOReg8 tccr3c;     	// [0x8C]
	IOReg8 reserved12; 	// [0x8D]
	IOReg8 reserved13; 	// [0x8E]
	IOReg8 reserved14; 	// [0x8F]
	IOReg8 ubrr0h;     	// [0x90]
	IOReg8 reserved15; 	// [0x91]
	IOReg8 reserved16; 	// [0x92]
	IOReg8 reserved17; 	// [0x93]
	IOReg8 reserved18; 	// [0x94]
	IOReg8 ucsr0c;     	// [0x95]
	IOReg8 reserved19; 	// [0x96]
	IOReg8 reserved20; 	// [0x97]
	IOReg8 ubrr1h;     	// [0x98]
	IOReg8 ubrr1l;     	// [0x99]
	IOReg8 ucsr1b;     	// [0x9A]
	IOReg8 ucsr1a;     	// [0x9B]
	IOReg8 udr1;       	// [0x9C]
	IOReg8 ucsr1c;     	// [0x9D]
	IOReg8 reserved21; 	// [0x9E]
	IOReg8 reserved22; 	// [0x9F]

	char ram[RAM_SIZE];
};

#endif
